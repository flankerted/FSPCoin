#ifndef STRINGS_H
#define STRINGS_H

#include <map>
#include <vector>
#include <QString>

#define KB_Bytes 1024
#define MB_Bytes (1024 * KB_Bytes)
#define GB_Bytes (1024 * MB_Bytes)


namespace Ui {

const QString spec = QString("/");
//const std::string unAuthAgentAddr = "0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF";

enum GUIStrings
{
    setDataDirCmd,
    showAccountsCmd,
    getAgentsInfoCmd,
    exitExternGUICmd,
    newAccountCmd,
    remoteIPCmd,
    loginAccountCmd,
    getObjInfoCmd,
    blizReadCmd,
    blizReadFileCmd,
    blizWriteCmd,
    blizWriteFileCmd,
    createObjCmd,
    addObjStorageCmd,
    getCurAgentAddrCmd,
    getSignedAgentInfoCmd,
    getAccTBalanceCmd,
    getAccBalanceCmd,
    getTransactionCmd,
    signAgentCmd,
    cancelAgentCmd,
    waitTXCompleteCmd,
    getSharingCodeCmd,
    getSignatureCmd,
    checkSignatureCmd,
    payForSharedFileCmd,
    sendTransactionCmd,
    getMailsCmd,
    sendMailCmd,

    okMsg,
    errorMsg,
    opRspMsg,
    rateMsg,
    opTimedOutMsg,
    noAnyAccountMsg,
    fNameduplicatedMsg,

    opFailedHint,
    opSucceedHint,
    connectingHint,
    connSucceedHint,
    connFailedHint,
    incorrectPwdTitle,
    confirmPwdErrHint,
    newPwdEmptyHint,
    exitWindowTitle,
    exitWindowHint,
    needAccountpwdHint,
    getObjErrHint,
    parseObjErrHint,
    parseMetaErrHint,
    incorrectLabelHint,
    synchronizeHint,
    notEnoughSpaceHint,
    createSpaceHint,
    createSpaceSizeHint,
    creatingSpaceHint,
    spaceNameErrorHint,
    uploadSelectHint,
    uploadingHint,
    downloadSelectHint,
    downloadNoSelectHint,
    downloadingHint,
    needConnectionHint,
    getAgentInfoErrHint,
    getAgentDetailsErrHint,
    getAccTBalanceErrHint,
    getAccBalanceErrHint,
    cancelAgentHint,
    getAgentInfoFailedHint,
    agentInvalidHint,
    waitingHint,
    waitingTimeoutHint,
    chargeByTimeHint,
    chargeByFlowHint,
    needMoreFlow,
    sharingPriceEmptyHint,
    sharingReicvEmptyHint,
    genSharingCodeFailedHint,
    getSignFailedHint,
    checkSignFailedHint,
    payForSharingFailedHint,
    payForSharingSuccHint,
    sendTransactionHint,
    selectAccToSendHint,
    enterReceiverToSendHint,
    enterAmountToSendHint,
    amountExceededHint,
    getMailsFailedHint,
    openMailFailedHint,
    getMailAttachFailedHint,

    programTitle,
    dataDirDlgTitle,
    confirmBtn,
    cancelBtn,
    selectUpFileBtn,
    sharingSpaceLabel,


//    dataDirDlgText,
//    defaultLabel,
//    selectDataDirBtn,
//    accountsLabel,
//    getBalanceBtn,
//    getSignedCsBtn,
//    signCsBtn,
//    cancelCsBtn,
//    importPrivkeyBtn,
//    spaceLabel,
//    createObjBtn,
//    addObjStorageBtn,
//    showSpaceLabel,
//    getRentSizeBtn,
//    spaceOpLabel,
//    blizWriteBtn,
//    blizWriteFileBtn,
//    selectFileBtn,
//    selectFileDlg,
//    blizReadFileBtn,
//    statusLabel,
//    clearBtn,
//    exitBtn,
//    needAccounts,
//    needAccountpwd,
//    wrongPassword,
//    paramsDlgTitle,
//    errParamInput,
//    waitForFeedback
};

const std::map<GUIStrings, std::string> SysMessages =
{
    {okMsg, "OK"},
    {errorMsg, "Error"},
    {opRspMsg, "OpRsp"},
    {rateMsg, "Rate"},
    {opTimedOutMsg, "Operation timed out"},
    {noAnyAccountMsg, "No any accounts"},
    {fNameduplicatedMsg, "Duplicated file name"}

};

const std::map<GUIStrings, std::string> RPCCommands =
{
    {setDataDirCmd, "gui_setDataDir"},
    {showAccountsCmd, "ele_accounts"},
    {getAgentsInfoCmd, "gui_getAgentsInfo"},
    {exitExternGUICmd, "gui_close"},
    {newAccountCmd, "personal_newAccount"},
    {loginAccountCmd, "gui_setAccountInUse"},
    {remoteIPCmd, "gui_setRemoteIP"},
    {getObjInfoCmd, "blizcs_getObjectsInfo"},
    {blizReadCmd, "blizcs_read"},
    {blizReadFileCmd, "blizcs_readFile"},
    {blizWriteCmd, "blizcs_write"},
    {blizWriteFileCmd, "blizcs_writeFile"},
    {createObjCmd, "blizcs_createObject"},
    {addObjStorageCmd, "blizcs_addObjectStorage"},
    {getCurAgentAddrCmd, "gui_getCurAgentAddress"},
    {getSignedAgentInfoCmd, "elephant_getSignedCs"},
    {getAccTBalanceCmd, "elephant_getTotalBalance"},
    {getAccBalanceCmd, "elephant_getBalance"},
    {getTransactionCmd, "elephant_checkTx"},
    {signAgentCmd, "elephant_signCs"},
    {cancelAgentCmd, "elephant_cancelCs"},
    {waitTXCompleteCmd, "gui_waitTx"},
    {getSharingCodeCmd, "gui_getSharingCode"},
    {getSignatureCmd, "gui_getSignature"},
    {checkSignatureCmd, "gui_checkSignature"},
    {payForSharedFileCmd, "gui_payForSHaredFile"},
    {sendTransactionCmd, "elephant_sendTransaction"},
    {sendMailCmd, "elephant_sendMail"},
    {getMailsCmd, "elephant_getMails"},
};

const std::map<GUIStrings, std::string> UIHintsEN =
{
    {noAnyAccountMsg, "It seeams that you don't have any account, please create or import an account first !"},
    {opFailedHint, "Operation failed !"},
    {opSucceedHint, "Operation complete successfully !"},
    {connectingHint, "Establishing the connection to an agent server!"},
    {connSucceedHint, "Connection established successfully !"},
    {connFailedHint, "Failed to connect to the agent !"},
    {exitWindowTitle, "Exit"},
    {exitWindowHint, "Are you sure to exit ?"},
    {incorrectPwdTitle, "Incorrect password"},
    {confirmPwdErrHint, "The confirm password is not consistent with the first one !"},
    {newPwdEmptyHint, "Please enter the password of new account first !"},
    {needAccountpwdHint, "Please enter the password of selected account :"},
    {getObjErrHint, "Get file list error, please check the connection !"},
    {parseObjErrHint, "Get file list error due to wrong object list returned !"},
    {parseMetaErrHint, "Get file list error due to wrong meta data !"},
    {incorrectLabelHint, "Illegal space label, a space label contains letters and numbers only !"},
    {synchronizeHint, "Wating for synchronization ..."},
    {notEnoughSpaceHint, "Not enough space !"},
    {createSpaceHint, "Please enter the label of the space to create :"},
    {createSpaceSizeHint, "Please enter the size(MB) of the space to create :"},
    {creatingSpaceHint, "Creating new space, please wait ..."},
    {spaceNameErrorHint, "Can not name this space, please change another name"},
    {uploadSelectHint, "Please select a file to upload :"},
    {uploadingHint, "Uploading the file, please wait ..."},
    {downloadSelectHint, "Please select the path to save the file :"},
    {downloadNoSelectHint, "Please select a file to download !"},
    {downloadingHint, "Downloading the file, please wait ..."},
    {needConnectionHint, "Please connect to an agent first !"},
    {getAgentInfoErrHint, "Can not get all agent informations !"},
    {getAgentDetailsErrHint, "Can not get agent details !"},
    {getAccTBalanceErrHint, "Can not get balance of my account(s) !"},
    {getAccBalanceErrHint, "Can not get balance of this account !"},
    {cancelAgentHint, "Are you sure to cancel the service of this agent ?"},
    {getAgentInfoFailedHint, "Get agent details error !"},
    {agentInvalidHint, "The agent you connected is not at your service, please apply for service first !"},
    {waitingHint, "Waiting ..."},
    {waitingTimeoutHint, "Waiting for transaction timed out, try restart to fix !"},
    {chargeByTimeHint, "Charge by time limit"},
    {chargeByFlowHint, "Charge by flow limit"},
    {needMoreFlow, "Not enough flow !"},
    {sharingPriceEmptyHint, "The price of the sharing can not be empty !"},
    {sharingReicvEmptyHint, "The address of whom to share with can not be empty !"},
    {genSharingCodeFailedHint, "Generate sharing code failed !"},
    {getSignFailedHint, "Get signature failed !"},
    {checkSignFailedHint, "Check signature failed !"},
    {payForSharingFailedHint, "Pay for the sharing failed !"},
    {payForSharingSuccHint, "Pay for the sharing successfully, and waiting it to be sealed. When it's sealed, you can check in \"Sharing\" label of the file list !"},
    {sendTransactionHint, "Are you sure to send these CTT to the receiver ?"},
    {selectAccToSendHint, "Please select the sender account from the account list before sending a transaction !"},
    {enterReceiverToSendHint, "Please enter the receiver account before sending a transaction !"},
    {enterAmountToSendHint, "Please enter the CTT amount before sending a transaction !"},
    {amountExceededHint, "The amount of CTT you entered greater than your balcance !"},
    {getMailsFailedHint, "Can not get mails due to some error !"},
    {openMailFailedHint, "Can not open the mail due to some error !"},
    {getMailAttachFailedHint, "Can not get the attachment of the mail due to some error !"},
};

const std::map<GUIStrings, std::string> UIHintsCN =
{
    {noAnyAccountMsg, ""}

};

const std::map<GUIStrings, std::string> stringsTableEN =
{
    {programTitle, "CTT File Manager"},
    {confirmBtn, "Confirm"},
    {cancelBtn, "Cancel"},
    {selectUpFileBtn, "Select"},
    {sharingSpaceLabel, "Sharings"},

//    {dataDirDlgTitle, "Set data directory"},
//    {defaultLabel, "Default: "},
//    {selectDataDirBtn, "Select"},
//    {dataDirDlgText, "Please set data directory that stores your private data first before\nyour first time to use"},
//    {accountsLabel, "The account to use:"},
//    {newAccountCmd, "New accounts"},
//    {getBalanceBtn, "Get balance"},
//    {importPrivkeyBtn, "Import an account"},
//    {spaceLabel, "Application for space:"},
//    {createObjBtn, "Apply for space"},
//    {addObjStorageBtn, "Expand space"},
//    {showSpaceLabel, "Show Space:"},
//    {getObjInfoBtn, "Show space objects"},
//    {getRentSizeBtn, "Show total space"},
//    {spaceOpLabel, "Write and read:"},
//    {blizWriteBtn, "Write strings"},
//    {blizReadBtn, "Read strings"},
//    {blizWriteFileBtn, "Upload a file"},
//    {selectFileBtn, "Select a file"},
//    {selectFileDlg, "Please choose the file path"},
//    {blizReadFileBtn, "Download as a file"},
//    {statusLabel, "Status and results:"},
//    {clearBtn, "Clear"},
//    {remoteIPCmd, "New connection"},
//    {exitBtn, "Exit"},
//    {confirmBtn, "Confirm"},
//    {cancelBtn, "Cancel"},
//    {needAccounts, "You should create at least one account first"},
//    {needAccountpwd, "Please type the password of the account: \n"},
//    {wrongPassword, "Invalid passphrase to the account selected"},
//    {paramsDlgTitle, "Parameters to input"},
//    {errParamInput, "invalid input in parameter"},
//    {waitForFeedback, "Waiting for the operation complete..."}
};

const std::map<GUIStrings, std::string> stringsTableCN =
{
//    {programTitle, "GCTT钱包客户端"},
//    {dataDirDlgTitle, "设置数据存储目录"},
//    {dataDirDlgText, "在第一次使用前请先设置个人数据存储目录"},
//    {defaultLabel, "默认: "},
//    {selectDataDirBtn, "选择目录"},
//    {accountsLabel, "要使用的账户："},
//    {newAccountCmd, "创建账户"},
//    {getBalanceBtn, "获取余额"},
//    {importPrivkeyBtn, "导入账户"},
//    {spaceLabel, "空间对象管理："},
//    {createObjBtn, "申请空间对象"},
//    {addObjStorageBtn, "扩展对象空间"},
//    {showSpaceLabel, "空间对象查看："},
//    {getObjInfoBtn, "查看已有对象"},
//    {getRentSizeBtn, "查看已租用空间"},
//    {spaceOpLabel, "空间对象读写："},
//    {blizWriteBtn, "向对象写入字符"},
//    {blizReadBtn, "读取对象空间"},
//    {blizWriteFileBtn, "上传文件"},
//    {blizReadFileBtn, "读取并写入文件"},
//    {selectFileBtn, "选择文件"},
//    {selectFileDlg, "请选择文件路径"},
//    {statusLabel, "状态信息和结果显示："},
//    {clearBtn, "清空"},
//    {remoteIPCmd, "建立连接"},
//    {exitBtn, "退出"},
//    {confirmBtn, "确定"},
//    {cancelBtn, "取消"},
//    {needAccounts, "你需要先创建至少一个账户"},
//    {needAccountpwd, "请输入账户的密码"},
//    {wrongPassword, "无效的密码"},
//    {paramsDlgTitle, "需要输入的参数"},
//    {errParamInput, "无效的输入参数"},
//    {waitForFeedback, "等待操作完成并返回......"}
};

}

#endif // STRINGS_H
